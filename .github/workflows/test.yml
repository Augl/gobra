# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2011-2020 ETH Zurich.

name: test

on:
  push: # run this workflow on every push
  pull_request: # run this workflow on every pull_request

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    container: gobraverifier/gobra-base:v6_z3_4.8.7
    env:
      SILVER_REF: "v.21.01-release"
      SILICON_REF: "memory-experiments"
      CARBON_REF: "v.21.01-release"
    steps:
      - name: Checkout Gobra
        uses: actions/checkout@v2
        with:
          path: gobra

      # clone Viper dependencies
      - name: Checkout Silver
        uses: actions/checkout@v2
        with:
          repository: viperproject/silver
          ref: ${{ env.SILVER_REF }}
          path: silver
      - name: Checkout Silicon
        uses: actions/checkout@v2
        with:
          repository: arquintl/silicon
          ref: ${{ env.SILICON_REF }}
          path: silicon
      - name: Checkout Carbon
        uses: actions/checkout@v2
        with:
          repository: viperproject/carbon
          ref: ${{ env.CARBON_REF }}
          path: carbon

      - name: Java Version
        run: java --version
      - name: Sbt Version
        run: sbt -version
      - name: Z3 Version
        run: z3 -version
      - name: Silver Commit
        run: echo "Silver commit:" $(git -C silver rev-parse HEAD)
      - name: Silicon Commit
        run: echo "Silicon commit:" $(git -C silicon rev-parse HEAD)
      - name: Carbon Commit
        run: echo "Carbon commit:" $(git -C carbon rev-parse HEAD)

      # create symlinks between and to Viper dependencies:
      - name: Create Silicon's sym links
        run: ln --symbolic ../silver
        working-directory: silicon
      - name: Create Carbon's sym links
        run: ln --symbolic ../silver
        working-directory: carbon
      - name: Create Gobra's sym links
        run: ln --symbolic ../silver; ln --symbolic ../silicon; ln --symbolic ../carbon
        working-directory: gobra

      - name: Set sbt cache variables
        run: echo "SBT_OPTS=-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy -Xss128m" >> $GITHUB_ENV
        # note that the cache path is relative to the directory in which sbt is invoked.

      - name: Cache SBT
        uses: actions/cache@v2
        with:
          path: |
            gobra/sbt-cache/.sbtboot
            gobra/sbt-cache/.boot
            gobra/sbt-cache/.ivy/cache
          # <x>/project/target and <x>/target, where <x> is e.g. 'gobra' or 'silicon', are intentionally not
          # included as several occurrences of NoSuchMethodError exceptions have been observed during CI runs. It seems
          # like sbt is unable to correctly compute source files that require a recompilation. Therefore, we have
          # disabled caching of compiled source files altogether
          key: ${{ runner.os }}-sbt-no-precompiled-sources-${{ hashFiles('**/build.sbt') }}

      - name: Compile tests
        run: sbt test:assembly
        working-directory: gobra

      - name: Start pidstat and execute it in the background
        # execute pidstat, redirect its output to a file, and store its PID in the env variable `PIDSTAT_PID` to later
        # terminate it
        run: |
          pidstat 1 -r -p ALL > pidstat.txt &
          echo "PIDSTAT_PID=$!" >> $GITHUB_ENV
        working-directory: gobra

      - name: Execute precompiled tests
        run: pidstat 1 -r -p ALL --human -e java -Xss128m -XshowSettings:vm -cp target/scala-2.13/gobra-test.jar -Dlogback.configurationFile=conf/logback.xml -DGOBRATESTS_REGRESSIONS_DIR=src/test/resources/regressions org.scalatest.run viper.gobra.GobraTests
        # run: java -Xss128m -XshowSettings:vm -cp target/scala-2.13/gobra-test.jar -Dlogback.configurationFile=conf/logback.xml -DGOBRATESTS_REGRESSIONS_DIR=src/test/resources/regressions org.scalatest.run viper.gobra.GobraTests
        working-directory: gobra

      # - name: Execute all tests
      ## run: pidstat 1 -r --human -e sbt test
      #  run: sbt test
      #  working-directory: gobra

      - name: Terminate pidstat
        if: ${{ always() }}
        run: kill -INT $PIDSTAT_PID

      - name: Get max RAM usage by Java and Z3
        if: ${{ always() }}
        # explanation:
        # - we use variable `max` to keep track of the maximum
        # - `$8` refers to the 8th column in the file which corresponds to the column storing RAM (in kb)
        # - `java$` matches only lines that end in the string 'java'
        # - variable `max` is printed after processing the entire file
        run: |
          MAX_JAVA_KB="$(awk -v max=0 '/java$/ {if($8>max){max=$8}}END{print max}' pidstat.txt)"
          MAX_Z3_KB="$(awk -v max=0 '/z3$/ {if($8>max){max=$8}}END{print max}' pidstat.txt)"
          echo "MAX_JAVA_GB=$(awk -v MAX_JAVA_KB=$MAX_JAVA_KB 'BEGIN {print MAX_JAVA_KB / 1000 / 1000}')" >> $GITHUB_ENV
          echo "MAX_Z3_GB=$(awk -v MAX_Z3_KB=$MAX_Z3_KB 'BEGIN {print MAX_Z3_KB / 1000 / 1000}')" >> $GITHUB_ENV
        working-directory: gobra

      - name: Prepare annotations
        if: ${{ always() }}
        env:
          JAVA_WARNING_THRESHOLD_GB: 4
          JAVA_FAILURE_THRESHOLD_GB: 6
          Z3_WARNING_THRESHOLD_GB: 0.5
          Z3_FAILURE_THRESHOLD_GB: 1
        # we transform bash variables into awk variables to not cause problems with bash's variable substitution
        # the required and optional JSON fields can be found in section "Properties of the `annotations` items" here:
        # https://docs.github.com/en/rest/reference/checks#create-a-check-run--parameters
        run: |
          JAVA_LEVEL=$(awk -v MAX_JAVA_GB=$MAX_JAVA_GB 'BEGIN { print (MAX_JAVA_GB>${{ env.JAVA_FAILURE_THRESHOLD_GB }}) ? "failure" : (MAX_JAVA_GB>${{ env.JAVA_WARNING_THRESHOLD_GB }}) ? "warning" : "notice"}')
          Z3_LEVEL=$(awk -v MAX_Z3_GB=$MAX_Z3_GB 'BEGIN { print (MAX_Z3_GB>${{ env.Z3_FAILURE_THRESHOLD_GB }}) ? "failure" : (MAX_Z3_GB>${{ env.Z3_WARNING_THRESHOLD_GB }}) ? "warning" : "notice"}')
          cat <<EOF > annotations.json
          [
          {
              "message": "Java used up to $MAX_JAVA_GB GB RAM",
              "path": ".github/workflows/test.yml",
              "start_line": "1",
              "end_line": "1",
              "annotation_level": "$JAVA_LEVEL"
          },
          {
              "message": "Z3 used up to $MAX_Z3_GB GB RAM",
              "path": ".github/workflows/test.yml",
              "start_line": "1",
              "end_line": "1",
              "annotation_level": "$Z3_LEVEL"
          }]
          EOF
        working-directory: gobra

      - name: Create annotations
        if: ${{ always() }}
        uses: yuzutech/annotations-action@v0.3.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          input: 'gobra/annotations.json'
          title: 'Java RAM Usage'

      - name: Upload RAM usage
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: pidstat.txt
          path: gobra/pidstat.txt
